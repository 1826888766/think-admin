<?php


namespace app\console\controller;


use app\common\controller\ConsoleBase;
use app\common\controller\Response;

class Login extends ConsoleBase
{
    protected $validate = "\\app\\common\\validate\\User";

    protected $validateAddScene = 'info';
    public function initialize()
    {
        // 禁用登录校验
        if ($this->request->action() == 'index' || $this->request->action() == 'logout') {
            $this->checkLogin = false;
            $this->checkAuth = false;
            $this->iframe = 0;
        }
        parent::initialize(); // TODO: Change the autogenerated stub
        // 禁用登录校验
        if ($this->request->action() == 'index' || $this->request->action() == 'logout') {
            $this->view->layout(false);
        }
    }

    public function index()
    {
        $login_fail = session('login_fail');
        $login_fail_number = 3;
        if ($this->request->isAjax()) {
            $data = [
                'username' => $this->request->param('username'),
                'password' => $this->request->param('password'),
                'captcha' => $this->request->param('captcha'),
            ];
            $rule = [
                'username|用户名或手机号' => 'require',
                'password|密码' => 'require',
            ];
            if ($login_fail >= 3) {
                $rule['captcha|验证码'] = 'require|captcha';
            }
            $validate = $this->validate($data, $rule);
            if ($validate !== true) {
                return Response::fail(1, $validate);
            }
            $login = \app\common\model\User::login($data);
            if ($login === true) {
                return Response::success();
            }
            $login_fail = $login_fail ? ($login_fail + 1) : 1;
            session('login_fail', $login_fail);
            if ($login_fail >= $login_fail_number) {
                return Response::fail(2, $login);
            }
            return Response::fail(1, $login);
        }
        $this->assign('login_fail', $login_fail);
        $this->assign('login_fail_number', $login_fail_number);
        return $this->fetch();
    }

    public function logout()
    {
        session('login_token', null);
        return redirect(url('login/index'));
    }

    public function info()
    {
        $user = session('login_token');
        if (!$user) {
            return redirect(url('login/index'));
        }
        if ($this->request->isAjax()) {
            if ($this->validate) {
            $scene = $this->validateAddScene ? "." . $this->validateAddScene : "";
            $error = $this->validate($this->param, $this->validate . $scene);
            if (true !== $error) {
                return Response::fail(1, $error);
            }
        }
            $data = \app\common\model\User::update($this->param);
            if ($data) {
                return Response::success($data, '编辑成功');
            }
            return Response::fail(1, '编辑失败');
        }
        $user =\app\common\model\User::where(['id'=>$user['id']])->find();

        $formField = [
            ['field' => 'id', 'type' => 'hidden'],
            ['field' => 'nickname', 'label' => '昵称', 'mid' => '只能是汉字、字母和数字'],
            ['field' => 'username', 'label' => '登录账号', 'mid' => '只能是字母和数字', "readonly" => "readonly"],
            ['field' => 'mobile', 'label' => '手机号'],
            ['field' => 'password', 'type' => 'password', 'label' => '密码'],
            ['field' => 'password_confirm', 'type' => 'password', 'label' => '确认密码'],
        ];
        $this->assign('formConfig', [
            'action' => $this->request->action(),
            'field' => $formField,
            'method' => 'POST',
            'data' => $user
        ]);
        return $this->fetch('template:form');
    }
}